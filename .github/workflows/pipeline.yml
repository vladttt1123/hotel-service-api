name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonar:
    name: SonarCloud Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: compile
        run: mvn clean verify -DskipTests

      - name: Run SonarCloud Analysis
        run: mvn sonar:sonar -DskipTests -Dsonar.host.url=https://sonarcloud.io -Dsonar.organization=vladttt1123 -Dsonar.projectKey=vladttt1123_hotel-service-api -Dsonar.login=${{ secrets.SONAR_TOKEN }}


  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8-oracle
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: dummypassword
          MYSQL_USER: admin-user
          MYSQL_PASSWORD: dummypassword
          MYSQL_DATABASE: hotel-reservation-database
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u admin-user --password=dummypassword"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3


    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Run Unit Tests
        run: mvn clean test -Punit-tests

  e2e-tests:
    name: Run E2E API Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Build Project
        run: mvn clean install -DskipTests

      - name: Start MySQL
        run: docker compose up -d mysql

      - name: Wait for MySQL to be ready
        run: sleep 10

      - name: Start API
        run: docker compose up -d api

      - name: Wait for API to be ready
        run: sleep 30

      - name: Insert Initial Data
        run: |
          mysql -h 127.0.0.1 -u admin-user --password=dummypassword hotel-reservation-database < src/test/java/com/hotelreservation/webservices/hotelreservation/api/mysql/hotel_dump.sql
          mysql -h 127.0.0.1 -u admin-user --password=dummypassword hotel-reservation-database < src/test/java/com/hotelreservation/webservices/hotelreservation/api/mysql/room_dump.sql

      - name: Run E2E Tests
        run: mvn clean test -Pe2e-tests


  scan:
    name: dependency-scan
    runs-on: ubuntu-latest
    needs: [ sonar, unit-tests, e2e-tests ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Build Application JAR
        run: mvn package -DskipTests

      - name: Run Trivy Security Scan (App Dependencies Only)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'filesystem'
          path: '.'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: 1


  deploy:
    runs-on: ubuntu-latest
    needs: [ sonar, unit-tests, e2e-tests, scan ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > my-key.pem
          chmod 600 my-key.pem

      - name: Build the Spring Boot application
        run: |
          mvn clean package -DskipTests

      - name: Create Deployment Package
        run: |
          zip -r app.zip . -x "*.git*"  # Exclude .git folder

      - name: Transfer Zip to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i my-key.pem app.zip ec2-user@54.92.195.94:/home/ec2-user/
      - name: Deploy on EC2
        run: |
          ssh -i my-key.pem ec2-user@54.92.195.94 << 'EOF'
            set -e  # Exit on errors
          
            # Navigate to home directory
            cd /home/ec2-user

            # Stop the running application
            docker-compose down || true

            # Remove old application folder
            rm -rf my-app

            # Unzip new application
            unzip app.zip -d my-app
            cd my-app

            # Start application
            docker-compose up -d --build mysql api
          EOF